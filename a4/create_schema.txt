-- create_schema.txt
-- CSC 370 - Spring 2018
--
--
-- Dylan Dvorachek
-- V00863468

rollback;

drop table if exists prerequisites;
drop table if exists grades;
drop table if exists enrollment;
drop table if exists course_offering;
drop table if exists students;
drop table if exists courses;




create table students(
    student_name varchar(255),
    student_id varchar(9),
    
    primary key(student_id),
    
    check(length(student_id) = 9),
    check(length(student_name) > 0 and length(student_name) < 256)
    );

create table courses(
    course_code varchar(10),
    
    primary key(course_code),
    
    check(length(course_code) <= 10)
    );

create table course_offering(
    course_code varchar(10),
    course_name varchar(128),
    term_code varchar(6),
    instructor_name varchar(255),
    capacity integer,
    
    primary key(course_code, term_code),
    foreign key(course_code) references courses(course_code)
        on delete restrict
        on update cascade,
    
    check(length(course_name) >= 1),
    check(length(term_code) = 6),
    check(capacity >= 0),
    check(length(instructor_name) > 0)
    );

create table enrollment(
    student_id varchar(9),
    course_code varchar(10),
    term_code varchar(6),
    
    primary key(student_id, course_code, term_code),
    foreign key(student_id) references students(student_id)
        on delete cascade
        on update cascade,
    foreign key(course_code, term_code) references course_offering(course_code, term_code)
        on delete restrict
        on update cascade
    --check capacity
    );

create table grades(
    student_id varchar(9),
    course_code varchar(10), --
    term_code varchar(6),  --
    grade int,
    
    primary key(student_id, course_code, term_code),
    foreign key(student_id, course_code, term_code) references enrollment(student_id, course_code, term_code)
        on update cascade
        on delete restrict, --
 
    check(grade <= 100 and grade >=0)
    );
    
-- course prerequisite code taken from..
-- B. Bird - 02/28/2018
-- ..and modified

create table prerequisites(
    course_code varchar(10),
    term_code varchar(6),
    prereq_code varchar(10),
    
    primary key(course_code, term_code, prereq_code),
    foreign key(course_code, term_code) references course_offering(course_code, term_code)  --
        on delete cascade
        on update cascade
    );
    

drop function if exists enrollment_possible_constraint_trigger();

create function enrollment_possible_constraint_trigger()
returns trigger as
$BODY$
begin
if (select count(*)
    from (
        with recursive
            all_prereqs as (select * from prerequisites
                            union
                            select P1.course_code, P2.prereq_code
                            from 
                                all_prereqs as P1
                              inner join
                                prerequisites as P2
                              on P1.prereq_code = P2.course_code)
        select distinct prereq_code from all_prereqs where course_code = new.course_code and term_code = new.term_code
          except
        select distinct course_code as prereq_code
        from grades natural join course_offering
        where student_id = new.student_id
        and grade >= 50) as X) > 0
then
    raise exception 'Student does not meet the prerequisites for the course.';
end if;
return new;
end
$BODY$
language plpgsql;

create constraint trigger enrollment_possible_constraint
    after insert or update on enrollment
    for each row
    execute procedure enrollment_possible_constraint_trigger();


    
drop function if exists check_capacity_constraint_trigger();

create function check_capacity_constraint_trigger()
returns trigger as
$BODY$
begin
if (select count(*)
    from enrollment
    where course_code = new.course_code
    and term_code = new.term_code)
    =
    (select capacity
    from course_offering
    where course_code = new.course_code
    and term_code = new.term_code) + 1
then
    raise exception 'Course Offering is already at maximum capacity.';

end if;
return new;
end
$BODY$
language plpgsql;

create constraint trigger check_capacity_constraint
    after insert on enrollment
    for each row
    execute procedure check_capacity_constraint_trigger();


drop function if exists invalid_deletion_constraint_trigger();

create function invalid_deletion_constraint_trigger()
returns trigger as
$BODY$
begin
if old.grade != NULL
then
    raise exception 'Cannot drop a course once a final grade has been assigned';
end if;
return new;
end
$BODY$
language plpgsql;

create constraint trigger invalid_deletion_constraint
    after delete on grades
    for each row
    execute procedure invalid_deletion_constraint_trigger();



drop function if exists student_exists_constraint_trigger();

create function student_exists_constraint_trigger()
returns trigger as
$BODY$
begin
if (select count(*) from students where student_name = new.student_name and student_id = new.student_id) > 0
then
    return NULL;
else
    return new;
end if;
end
$BODY$
language plpgsql;

create constraint trigger student_exists_constraint
    after insert on students
    for each row
    execute procedure student_exists_constraint_trigger();

-------------------------------------------------------------------
drop function if exists course_exists_constraint_trigger();

create function course_exists_constraint_trigger()
returns trigger as
$BODY$
    begin
        if (select count(*) from courses where course_code = new.course_code) > 0 then
            return NULL;
        else
            return new;
        end if;
    end;
$BODY$
language plpgsql;

create constraint trigger course_exists_constraint
    after insert on courses
    for each row
    execute procedure course_exists_constraint_trigger();


-------------------------------------------------------------------

drop function if exists student_enrolled_constraint_trigger();

create function student_enrolled_constraint_trigger()
returns trigger as
$BODY$
begin
if (select count(*) 
    from enrollment 
    where student_id = new.student_id
    and course_code = new.course_code
    and term_code = new.term_code) > 0
then
    return NULL;
else
    return new;
end if;
end
$BODY$
language plpgsql;

create constraint trigger student_enrolled_constraint
    after insert on enrollment
    for each row
    execute procedure student_enrolled_constraint_trigger();

/*
insert into students values ('Dylan', 'V00863468');
insert into students values ('Justin', 'V00863469');
insert into students values ('Chad', 'V00863470');
insert into students values ('Ethan', 'V00863471');

insert into courses values ('CSC 110');

insert into course_offering values ('CSC 110', 'Fundamentals 1', '201709', 'Bill', 3);

insert into enrollment values ('V00863468', 'CSC 110', '201709');
insert into enrollment values ('V00863469', 'CSC 110', '201709');
insert into enrollment values ('V00863470', 'CSC 110', '201709');



insert into prerequisites values ('CSC 115', 'CSC 110');
insert into prerequisites values ('CSC 116', 'CSC 111');
insert into prerequisites values ('CSC 225', 'CSC 115');
insert into prerequisites values ('CSC 226', 'CSC 225');
insert into prerequisites values ('CSC 230', 'CSC 115');
insert into prerequisites values ('SENG 265', 'CSC 115');
insert into prerequisites values ('CSC 330', 'CSC 226');
insert into prerequisites values ('CSC 330', 'CSC 230');
insert into prerequisites values ('CSC 330', 'SENG 265');
insert into prerequisites values ('CSC 370', 'CSC 226');
insert into prerequisites values ('CSC 370', 'SENG 265');
insert into prerequisites values ('SENG 474', 'SENG 265');

select * from prerequisites;


with
  prereqs as (select * from prerequisites),
  prereqs2 as (select * from prerequisites
  			   union
  			   select P1.course_code,  P2.prereq_code
  			   	from 
  			   		prerequisites as P1
  			   	  inner join
  			   	  	prerequisites as P2
  			   	  on P1.prereq_code = P2.course_code)
select * from prereqs2 where course_code = 'SENG 474';


with recursive
  all_prereqs as (select * from prerequisites
  			   union
  			   select P1.course_code, P2.prereq_code
  			   	from 
  			   		all_prereqs as P1
  			   	  inner join
  			   	  	prerequisites as P2
  			   	  on P1.prereq_code = P2.course_code)
select * from all_prereqs where course_code = 'SENG 474';
*/